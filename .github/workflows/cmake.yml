name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug

jobs:
  macos:
    strategy:
      matrix:
        cxx_standard: [ 20, 23 ]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_STANDARD=${{matrix.cxx_standard}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build -j 4

  linux:
    strategy:
      matrix:
        compiler:
          - { pkg: g++, exe: g++, version: 14 }
          - { pkg: clang, exe: clang++, version: 18 }
        cxx_standard: [ 20, 23 ]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Compiler
        run: |
          sudo apt update
          sudo apt install -y ${{matrix.compiler.pkg}}-${{matrix.compiler.version}}

      - name: Configure
        env:
          CXX: ${{matrix.compiler.exe}}-${{matrix.compiler.version}}
        run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_STANDARD=${{matrix.cxx_standard}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLIBHAT_TESTING=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build -j 4

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} -R libhat_test_.*

  linux-arm64-cross:
    name: Linux (AArch64 Cross-Compile)
    runs-on: ubuntu-latest # Use x86_64 runner for cross-compilation
    steps:
      - uses: actions/checkout@v4

      - name: Install AArch64 Cross-Compiler
        run: |
          sudo apt update
          sudo apt install -y g++-aarch64-linux-gnu

      - name: Configure CMake for AArch64 Cross-Compilation
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DLIBHAT_TESTING=OFF # Disable tests as they cannot run

      - name: Build
        run: cmake --build ${{github.workspace}}/build -j 4

      # Note: Cannot run tests as the runner is x86_64

  linux-arm64-qemu-test:
    name: Linux (AArch64 QEMU Test)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64 # Setup QEMU for arm64 architecture

      - name: Install AArch64 Cross-Compiler and QEMU static
        run: |
          sudo apt update
          sudo apt install -y g++-aarch64-linux-gnu qemu-user-static

      - name: Configure CMake for AArch64 Cross-Compilation (with Tests)
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DLIBHAT_TESTING=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build -j 4

      - name: Test (via QEMU)
        working-directory: ${{github.workspace}}/build
        run: qemu-aarch64-static ./bin/libhat_tests # Assuming tests executable is named libhat_tests and located in build/bin

  windows:
    strategy:
      matrix:
        target: [ Win32, x64 ] # ARM, ARM64
        toolset: [ v143, ClangCL ]
        cxx_standard: [ 20, 23 ]
        include:
          - target: Win32
            vcvars: vcvars32
          - target: x64
            vcvars: vcvars64
#          - target: ARM
#            vcvars: vcvarsamd64_arm
#          - target: ARM64
#            vcvars: vcvarsamd64_arm64
        exclude:
          - toolset: ClangCL
            target: ARM
          - toolset: ClangCL
            target: ARM64
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure
        run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_STANDARD=${{matrix.cxx_standard}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLIBHAT_SHARED_C_LIB=ON -DLIBHAT_TESTING=${{startsWith(matrix.target, 'ARM') && 'OFF' || 'ON'}} -A ${{matrix.target}} -T ${{matrix.toolset}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build -j 4

      - name: Test
        if: ${{!startsWith(matrix.target, 'ARM')}}
        working-directory: ${{github.workspace}}/build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\${{matrix.vcvars}}.bat"
          ctest -C ${{env.BUILD_TYPE}} -R libhat_test_.*
